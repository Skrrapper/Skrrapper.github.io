<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【6S081】Lab Note1</title>
    <link href="/2025/03/09/%E3%80%906S081%E3%80%91%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B01/"/>
    <url>/2025/03/09/%E3%80%906S081%E3%80%91%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h1 id="配置xv6环境"><a href="#配置xv6环境" class="headerlink" title="配置xv6环境"></a>配置xv6环境</h1><p>参考这篇文章即可：<a href="https://blog.csdn.net/John_Snowww/article/details/129972288">环境配置</a></p><ul><li><p>对于xv6的使用，更推荐用VSCode等文本编辑器进行启动，毕竟面对着命令提示符，还是太过寒酸了。</p></li><li><p>每次实验完成之后需要进行提交和测试，并且要新创一个<code>time.txt</code>文件告知完成时间。</p></li><li><p>每次创建文件会需要在Makefile中指定文件的编译顺序。即一般进行以下操作</p><p><code>$U/_操作名\</code></p></li><li><p>可以通过github进行提交。</p></li><li><p>注意：代码中的注释往往包含重要信息，务必要仔细查看</p></li></ul><h1 id="实验1-sleep-难度：Easy"><a href="#实验1-sleep-难度：Easy" class="headerlink" title="实验1 sleep(难度：Easy)"></a>实验1 sleep(难度：Easy)</h1><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><blockquote><p><strong>实现xv6的UNIX程序</strong><code>sleep</code><strong>：您的</strong><code>sleep</code><strong>应该暂停到用户指定的计时数。一个滴答(tick)是由xv6内核定义的时间概念，即来自定时器芯片的两个中断之间的时间。您的解决方案应该在文件<code>\user/sleep.c\</code>中</strong></p></blockquote><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>在你开始编码之前，请阅读《book-riscv-rev1》的第一章</li><li>看看其他的一些程序（如***&#x2F;user&#x2F;echo.c, &#x2F;user&#x2F;grep.c, &#x2F;user&#x2F;rm.c***）查看如何获取传递给程序的命令行参数</li><li>如果用户忘记传递参数，<code>sleep</code>应该打印一条错误信息</li><li>命令行参数作为字符串传递; 您可以使用<code>atoi</code>将其转换为数字（详见***&#x2F;user&#x2F;ulib.c***）</li><li>使用系统调用<code>sleep</code></li><li>请参阅*<strong>kernel&#x2F;sysproc.c*<strong>以获取实现<code>sleep</code>系统调用的xv6内核代码（查找<code>sys_sleep</code>），</strong>*user&#x2F;user.h**<em>提供了<code>sleep</code>的声明以便其他程序调用，用汇编程序编写的</em></strong>user&#x2F;usys.S***可以帮助<code>sleep</code>从用户区跳转到内核区。</li><li>确保<code>main</code>函数调用<code>exit()</code>以退出程序。</li><li>将你的<code>sleep</code>程序添加到***Makefile***中的<code>UPROGS</code>中；完成之后，<code>make qemu</code>将编译您的程序，并且您可以从xv6的shell运行它。</li><li>看看Kernighan和Ritchie编著的《C程序设计语言》（第二版）来了解C语言。</li></ul><h2 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h2><p>这题很简单，要求我们实现一个sleep函数来进行休眠操作。</p><p>我们看要求中，让我们去看user中的调用参数示例，这也是我们后续使用的很多的一个范式。</p><p>我们去看看<code>echo.c</code></p><p><img src="https://joolin-1327264753.cos.ap-guangzhou.myqcloud.com/pictures/image-20250307112729855.png" alt="image-20250307112729855"></p><p>可以看到，这个主函数中调用了两个参数，<code>argc</code>和<code>*argv[]</code>，一个是命令行参数的数量，一个是用来接收命令行参数的数组。</p><p>我们回到<code>sleep.c</code>中，知道了该如何接受命令行参数，也就知道了如何写它的框架。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;kernel/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;user/user.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span>** argv)</span><br>&#123;<br>   <span class="hljs-keyword">if</span>(argc!=<span class="hljs-number">2</span>)<span class="hljs-comment">//这里指的是在命令行中输出时要用到的参数，我们这里要输出sleep 10（也就是休眠10个时间单位），所以也就有两个参数。</span><br>   &#123;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error Example:sleep 2\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>   &#125;<br>   ...<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们再参考sleep要求我们输入的参数，它是一个<code>int</code>类型的参数，是用来表示休眠的时间。</p><p>那么我们如果需要接受一个<code>int</code>类型的参数来休眠指定时间，也就需要将命令行参数转类型成整数类型。这里使用到了<code>atoi</code></p><p>在<code>ulib.c</code>中可以找到</p><p><img src="https://joolin-1327264753.cos.ap-guangzhou.myqcloud.com/pictures/image-20250307134746296.png" alt="image-20250307134746296"></p><p>我们照葫芦画瓢。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> num_of_tick = atoi(argv[<span class="hljs-number">1</span>]);<span class="hljs-comment">//这里argv[1]是指的int具体是多少，用一个变量来读取。</span><br><span class="hljs-keyword">if</span>(sleep(num_of_tick) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Can not sleep\n&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>到此，一个简单的sleep程序就实现完成了。实际上我们并不需要去写sleep的实现过程，因为我们只需要直接调用即可。<strong>我们要做的重要的事情是：在命令行中实现该函数的调用。</strong></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;kernel/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;user/user.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span>** argv)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(argc!=<span class="hljs-number">2</span>)<span class="hljs-comment">//两个参数，一个是程序名，一个是参数，这里是sleep int</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error Example:sleep 2\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//sleep系统调用函数在在user.h中被定义，但深层是通过汇编语言绑定到sys_sleep函数上的</span><br>    <span class="hljs-type">int</span> num_of_tick = atoi(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span>(sleep(num_of_tick)&lt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Can not sleep\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实验2-pingpong（难度：Easy）"><a href="#实验2-pingpong（难度：Easy）" class="headerlink" title="实验2 pingpong（难度：Easy）"></a>实验2 pingpong（难度：Easy）</h1><h2 id="实验要求-1"><a href="#实验要求-1" class="headerlink" title="实验要求"></a>实验要求</h2><blockquote><p><strong>编写一个使用UNIX系统调用的程序来在两个进程之间“ping-pong”一个字节，请使用两个管道，每个方向一个。父进程应该向子进程发送一个字节;子进程应该打印“<code>&lt;pid&gt;: received ping</code>”，其中<code>&lt;pid&gt;</code>是进程ID，并在管道中写入字节发送给父进程，然后退出;父级应该从读取从子进程而来的字节，打印“<code>&lt;pid&gt;: received pong</code>”，然后退出。您的解决方案应该在文件*user&#x2F;pingpong.c*中。</strong></p></blockquote><h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a><strong>提示</strong></h2><ul><li>使用<code>pipe</code>来创造管道</li><li>使用<code>fork</code>创建子进程</li><li>使用<code>read</code>从管道中读取数据，并且使用<code>write</code>向管道中写入数据</li><li>使用<code>getpid</code>获取调用进程的pid</li><li>将程序加入到***Makefile***的<code>UPROGS</code></li><li>xv6上的用户程序有一组有限的可用库函数。您可以在<em><strong>user&#x2F;user.h*<strong>中看到可调用的程序列表；源代码（系统调用除外）位于</strong>*user&#x2F;ulib.c**<em>、</em></strong>user&#x2F;printf.c*<strong>和</strong></em>user&#x2F;umalloc.c*中。</li></ul><h2 id="实验思路-1"><a href="#实验思路-1" class="headerlink" title="实验思路"></a>实验思路</h2><p>我们看提示，使用<code>pipe</code>来创造管道的目的是什么呢？因为这是作为父进程与子进程之间进行传输的方式。我们的实验目的是<strong>实现子父进程之间的字符串传递</strong>，那么就可以这样去想：通过两个管道实现了父进程和子进程之间的简单通信。父进程向子进程发送 “ping” 消息，子进程接收到后打印消息并向父进程发送 “pong” 消息，父进程接收到后打印消息。</p><p>所以说我们创建两个pipe，每个pipe都有两个文件描述符，一个用于读一个用于写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> p1[<span class="hljs-number">2</span>], p2[<span class="hljs-number">2</span>];<br>pipe(p1), pipe(p2);<br></code></pre></td></tr></table></figure><p>我们知道了文件描述符0、1、2分别表示什么意思之后，这里就好理解了。</p><ol><li><strong>标准输入（stdin）</strong>：文件描述符为 <code>0</code>，用于从键盘或其他输入设备读取数据。</li><li><strong>标准输出（stdout）</strong>：文件描述符为 <code>1</code>，用于向屏幕或其他输出设备写入数据。</li><li><strong>标准错误（stderr）</strong>：文件描述符为 <code>2</code>，用于向屏幕或其他输出设备写入错误信息。</li></ol><p>好，我们知道了这些含义，那么后续就可以使用它们来进行读写操作。</p><p>其次，我们需要建立一个缓冲区来进行数据的缓存，保存从管道读取的信息，相当于子进程和父进程之间的一个“中介”。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> buf[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 用于保存从管道读取的信息</span><br><span class="hljs-type">int</span> size; <span class="hljs-comment">//用于保存读取的字节数</span><br></code></pre></td></tr></table></figure><p>好，一切前置准备就绪后，我们来创建子进程和父进程。</p><p>在创建前，我们需要知道<code>pid</code> 用于区分父进程和子进程，并根据不同的返回值执行相应的代码逻辑。</p><p>并且我们根据实验要求，来理解子进程和父进程分别要做些什么。</p><p>在子进程中：</p><ul><li>关闭管道 <code>p1</code> 的写端。</li><li>从管道 <code>p1</code> 的读端读取数据，并打印接收到的信息。</li><li>关闭管道 <code>p2</code> 的读端。</li><li>向管道 <code>p2</code> 的写端写入 “pong\n”。</li><li>退出子进程。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> pid = fork();<span class="hljs-comment">//pid用于判断创建的进程</span><br><span class="hljs-comment">//如果pid==0，那么说明是创建的子进程</span><br><span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 子进程执行的代码</span><br>    close(p1[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 关闭管道1的写端</span><br>    <span class="hljs-keyword">if</span> ((size = read(p1[<span class="hljs-number">0</span>], buf, <span class="hljs-keyword">sizeof</span> buf)) &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 从管道1读取数据</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: received &quot;</span>, getpid());<br>        write(<span class="hljs-number">1</span>, buf, size);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: receive failed\n&quot;</span>, getpid());<br>    &#125;<br>    close(p2[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 关闭管道2的读端</span><br>    write(p2[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;pong\n&quot;</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 向管道2写数据</span><br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在父进程中：</p><ul><li>关闭管道 <code>p1</code> 的读端。</li><li>向管道 <code>p1</code> 的写端写入 “ping\n”。</li><li>等待子进程结束。</li><li>关闭管道 <code>p2</code> 的写端。</li><li>从管道 <code>p2</code> 的读端读取数据，并打印接收到的信息。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//如果返回的是子进程的进程ID，那么说明创建的是父进程</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 父进程执行的代码</span><br>    close(p1[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 关闭管道1的读端</span><br>    write(p1[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;ping\n&quot;</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 向管道1写数据</span><br><br>    wait(<span class="hljs-number">0</span>); <span class="hljs-comment">// 等待子进程结束</span><br>    close(p2[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 关闭管道2的写端</span><br>    <span class="hljs-keyword">if</span> ((size = read(p2[<span class="hljs-number">0</span>], buf, <span class="hljs-keyword">sizeof</span> buf)) &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 从管道2读取数据</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: received &quot;</span>, getpid());<br>        write(<span class="hljs-number">1</span>, buf, size);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: receive failed\n&quot;</span>, getpid());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//错误处理</span><br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fork error\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：我们发现在主要代码的前后，通常都会有<code>close</code>操作，也就是关闭管道的读端或者写端。其实这里的作用是防止管道进入或者出去什么“奇怪的东西”，避免了意外的读写操作，从而产生资源泄露。</p><h2 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// user/pingpong.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br>    <span class="hljs-type">int</span> p1[<span class="hljs-number">2</span>], p2[<span class="hljs-number">2</span>];<br>    pipe(p1), pipe(p2);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 用于保存从管道读取的信息</span><br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-type">int</span> pid = fork();<br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//读取父进程传过来的信息</span><br>        close(p1[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 关闭管道1的写端</span><br>        <span class="hljs-keyword">if</span> ((size = read(p1[<span class="hljs-number">0</span>], buf, <span class="hljs-keyword">sizeof</span> buf)) &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 从管道1读取不大于buf个字节的数据到buf</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: received &quot;</span>, getpid());<br>            write(<span class="hljs-number">1</span>, buf, size);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: receive failed\n&quot;</span>, getpid());<br>        &#125;<br>        <span class="hljs-comment">//向父进程写信息</span><br>        close(p2[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 关闭管道2的读端</span><br>        write(p2[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;pong\n&quot;</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// 向管道2写从“pong\n&quot;开始的不大于5个字节的数据</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//向子进程写信息</span><br>        close(p1[<span class="hljs-number">0</span>]);<br>        write(p1[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;ping\n&quot;</span>, <span class="hljs-number">5</span>);<br><br>        wait(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//读取子进程传过来的信息</span><br>        close(p2[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span> ((size = read(p2[<span class="hljs-number">0</span>], buf, <span class="hljs-keyword">sizeof</span> buf)) &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: received &quot;</span>, getpid());<br>            write(<span class="hljs-number">1</span>, buf, size);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: receive failed\n&quot;</span>, getpid());<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fork error\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实验3-primes（难度：Moderate）"><a href="#实验3-primes（难度：Moderate）" class="headerlink" title="实验3 primes（难度：Moderate）"></a>实验3 primes（难度：Moderate）</h1><h2 id="实验要求-2"><a href="#实验要求-2" class="headerlink" title="实验要求"></a>实验要求</h2><blockquote><p><strong>使用管道编写</strong><code>prime sieve</code><strong>(筛选素数)的并发版本。这个想法是由Unix管道的发明者Doug McIlroy提出的。请查看<a href="http://swtch.com/~rsc/thread/">这个网站</a>(翻译在下面)，该网页中间的图片和周围的文字解释了如何做到这一点。您的解决方案应该在*user&#x2F;primes.c*文件中。</strong></p><p>您的目标是使用<code>pipe</code>和<code>fork</code>来设置管道。第一个进程将数字2到35输入管道。对于每个素数，您将安排创建一个进程，该进程通过一个管道从其左邻居读取数据，并通过另一个管道向其右邻居写入数据。由于xv6的文件描述符和进程数量有限，因此第一个进程可以在35处停止。</p></blockquote><h2 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h2><ul><li>仔细关闭进程不需要的文件描述符，否则您的程序将在第一个进程达到35之前就会导致xv6系统资源不足。</li><li>一旦第一个进程达到35，它应该使用<code>wait</code>等待整个管道终止，包括所有子孙进程等等。因此，主<code>primes</code>进程应该只在打印完所有输出之后，并且在所有其他<code>primes</code>进程退出之后退出。</li><li>提示：当管道的<code>write</code>端关闭时，<code>read</code>返回零。</li><li>最简单的方法是直接将32位（4字节）int写入管道，而不是使用格式化的ASCII I&#x2F;O。</li><li>您应该仅在需要时在管线中创建进程。</li><li>将程序添加到***Makefile***中的<code>UPROGS</code></li></ul><h2 id="实验思路-2"><a href="#实验思路-2" class="headerlink" title="实验思路"></a>实验思路</h2><p>首先我们看提示中，需要注意的第一点：要及时关闭不需要的文件描述符，也就与pingpong中管道读写的关闭类似，及时解除引用。</p><p>其次，我们需要定义一个最大常量，保证在超过这个常量时，应该调用<code>wait</code>直到管道中止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 34</span><br></code></pre></td></tr></table></figure><p>接下来，我们就进行程序的分析：如果我们需要进行筛选操作，筛选出1-34中所有的素数，那么我们可以如何进行思考呢？没错，使用递归就可以实现。</p><p>好，那我们直接递归函数<code>recur</code>，进行该函数的编写即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//recur函数的功能：递归调用，找出质数（筛选）</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">recur</span><span class="hljs-params">(<span class="hljs-type">int</span> p[<span class="hljs-number">2</span>])</span><br>&#123;<br>    <span class="hljs-type">int</span> primes, nums;<br>    <span class="hljs-type">int</span> p1[<span class="hljs-number">2</span>];<br><br>    close(<span class="hljs-number">0</span>);    <span class="hljs-comment">// 关闭标准输入</span><br>    dup(p[<span class="hljs-number">0</span>]);   <span class="hljs-comment">// 复制管道的读端到标准输入</span><br>    close(p[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 关闭管道的读端</span><br>    close(p[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 关闭管道的写端</span><br><br>    <span class="hljs-keyword">if</span> (read(<span class="hljs-number">0</span>, &amp;primes, <span class="hljs-number">4</span>))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prime %d\n&quot;</span>, primes); <span class="hljs-comment">// 打印由父进程传来的第一个质数</span><br><br>        pipe(p1); <span class="hljs-comment">// 创建新的管道</span><br><br>        <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>)<span class="hljs-comment">//创建子进程</span><br>        &#123;<br>            recur(p1); <span class="hljs-comment">// 递归调用</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">while</span>(read(<span class="hljs-number">0</span>, &amp;nums, <span class="hljs-number">4</span>))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums % primes != <span class="hljs-number">0</span>)<span class="hljs-comment">//将符合条件的数字传给子进程</span><br>                &#123;<br>                    write(p1[<span class="hljs-number">1</span>], &amp;nums, <span class="hljs-number">4</span>); <span class="hljs-comment">// 将不是primes的倍数的数写入管道</span><br>                &#125;<br>            &#125;<br>            close(p1[<span class="hljs-number">1</span>]);<span class="hljs-comment">//关闭写端</span><br>            close(<span class="hljs-number">0</span>);<span class="hljs-comment">//关闭标准输入</span><br>            wait(<span class="hljs-number">0</span>);<span class="hljs-comment">//等待子进程结束</span><br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        close(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后将其与主函数结合即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> p[<span class="hljs-number">2</span>];<br>    pipe(p);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= SIZE; i++)<br>    &#123;<br>        write(p[<span class="hljs-number">1</span>], &amp;i, <span class="hljs-number">4</span>); <span class="hljs-comment">// 将 2 到 SIZE (34) 写入管道</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>) <span class="hljs-comment">// 创建子进程</span><br>    &#123;<br>        recur(p);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        close(p[<span class="hljs-number">1</span>]);<br>        wait(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的递归函数的妙处就在于：</p><p>它利用管道和递归调用来实现质数筛选算法。每一层递归创建一个新的管道，用于传递筛选后的数。</p><p>主进程将 2 到 <code>SIZE</code> 的数写入管道，子进程通过递归调用 <code>recur</code> 函数筛选出质数，并将不是当前质数倍数的数传递给下一个子进程。每个子进程负责筛选一个质数，并将结果打印出来。</p><h2 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SIZE 34</span><br><br><span class="hljs-comment">//recur函数的功能：递归调用，找出质数（筛选）</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">recur</span><span class="hljs-params">(<span class="hljs-type">int</span> p[<span class="hljs-number">2</span>])</span><br>&#123;<br>    <span class="hljs-type">int</span> primes, nums;<br>    <span class="hljs-type">int</span> p1[<span class="hljs-number">2</span>];<br><br>    close(<span class="hljs-number">0</span>);    <span class="hljs-comment">// 关闭标准输入</span><br>    dup(p[<span class="hljs-number">0</span>]);   <span class="hljs-comment">// 复制管道的读端到标准输入</span><br>    close(p[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 关闭管道的读端</span><br>    close(p[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 关闭管道的写端</span><br><br>    <span class="hljs-keyword">if</span> (read(<span class="hljs-number">0</span>, &amp;primes, <span class="hljs-number">4</span>))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;prime %d\n&quot;</span>, primes); <span class="hljs-comment">// 打印由父进程传来的第一个质数</span><br><br>        pipe(p1); <span class="hljs-comment">// 创建新的管道</span><br><br>        <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>)<span class="hljs-comment">//创建子进程</span><br>        &#123;<br>            recur(p1); <span class="hljs-comment">// 递归调用</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">while</span>(read(<span class="hljs-number">0</span>, &amp;nums, <span class="hljs-number">4</span>))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums % primes != <span class="hljs-number">0</span>)<span class="hljs-comment">//将符合条件的数字传给子进程</span><br>                &#123;<br>                    write(p1[<span class="hljs-number">1</span>], &amp;nums, <span class="hljs-number">4</span>); <span class="hljs-comment">// 将不是primes的倍数的数写入管道</span><br>                &#125;<br>            &#125;<br>            close(p1[<span class="hljs-number">1</span>]);<span class="hljs-comment">//关闭写端</span><br>            close(<span class="hljs-number">0</span>);<span class="hljs-comment">//关闭标准输入</span><br>            wait(<span class="hljs-number">0</span>);<span class="hljs-comment">//等待子进程结束</span><br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        close(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> p[<span class="hljs-number">2</span>];<br>    pipe(p);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= SIZE; i++)<br>    &#123;<br>        write(p[<span class="hljs-number">1</span>], &amp;i, <span class="hljs-number">4</span>); <span class="hljs-comment">// 将2到SIZE(34)写入管道</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(fork()==<span class="hljs-number">0</span>)<span class="hljs-comment">//创建子进程</span><br>    &#123;<br>        recur(p);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        close(p[<span class="hljs-number">1</span>]);<br>        wait(<span class="hljs-number">0</span>);<br>    &#125;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实验4-find（难度：Moderate）"><a href="#实验4-find（难度：Moderate）" class="headerlink" title="实验4 find（难度：Moderate）"></a>实验4 find（难度：Moderate）</h1><h2 id="实验要求-3"><a href="#实验要求-3" class="headerlink" title="实验要求"></a>实验要求</h2><blockquote><p><strong>写一个简化版本的UNIX的<code>find</code>程序：查找目录树中具有特定名称的所有文件，你的解决方案应该放在*user&#x2F;find.c*</strong></p></blockquote><h2 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h2><ul><li>查看***user&#x2F;ls.c***文件学习如何读取目录</li><li>使用递归允许<code>find</code>下降到子目录中</li><li>不要在“<code>.</code>”和“<code>..</code>”目录中递归</li><li>对文件系统的更改会在qemu的运行过程中一直保持；要获得一个干净的文件系统，请运行<code>make clean</code>，然后<code>make qemu</code></li><li>你将会使用到C语言的字符串，要学习它请看《C程序设计语言》（K&amp;R）,例如第5.5节</li><li>注意在C语言中不能像python一样使用“<code>==</code>”对字符串进行比较，而应当使用<code>strcmp()</code></li><li>将程序加入到Makefile的<code>UPROGS</code></li></ul><h2 id="实验思路-3"><a href="#实验思路-3" class="headerlink" title="实验思路"></a>实验思路</h2><p>提示中要我们看ls.c，我们照做：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/fs.h&quot;</span></span><br><br><span class="hljs-type">char</span>*<br><span class="hljs-title function_">fmtname</span><span class="hljs-params">(<span class="hljs-type">char</span> *path)</span><br>&#123;<br>  <span class="hljs-type">static</span> <span class="hljs-type">char</span> buf[DIRSIZ+<span class="hljs-number">1</span>];<br>  <span class="hljs-type">char</span> *p;<br><br>  <span class="hljs-comment">// Find first character after last slash.</span><br>  <span class="hljs-keyword">for</span>(p=path+<span class="hljs-built_in">strlen</span>(path); p &gt;= path &amp;&amp; *p != <span class="hljs-string">&#x27;/&#x27;</span>; p--)<br>    ;<br>  p++;<br><br>  <span class="hljs-comment">// Return blank-padded name.</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(p) &gt;= DIRSIZ)<br>    <span class="hljs-keyword">return</span> p;<br>  memmove(buf, p, <span class="hljs-built_in">strlen</span>(p));<br>  <span class="hljs-built_in">memset</span>(buf+<span class="hljs-built_in">strlen</span>(p), <span class="hljs-string">&#x27; &#x27;</span>, DIRSIZ-<span class="hljs-built_in">strlen</span>(p));<br>  <span class="hljs-keyword">return</span> buf;<br>&#125;<br><br><span class="hljs-type">void</span><br><span class="hljs-title function_">ls</span><span class="hljs-params">(<span class="hljs-type">char</span> *path)</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">512</span>], *p;<br>  <span class="hljs-type">int</span> fd;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> <span class="hljs-title">de</span>;</span><span class="hljs-comment">//目录项</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><span class="hljs-comment">//文件属性</span><br><br>  <span class="hljs-keyword">if</span>((fd = open(path, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//如果文件描述符&lt;0，说明打开文件失败</span><br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;ls: cannot open %s\n&quot;</span>, path);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span>(fstat(fd, &amp;st) &lt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;ls: cannot stat %s\n&quot;</span>, path);<br>    close(fd);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">switch</span>(st.type)&#123;<br>  <span class="hljs-keyword">case</span> T_FILE:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %d %l\n&quot;</span>, fmtname(path), st.type, st.ino, st.size);<br>    <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-keyword">case</span> T_DIR:<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(path) + <span class="hljs-number">1</span> + DIRSIZ + <span class="hljs-number">1</span> &gt; <span class="hljs-keyword">sizeof</span> buf)&#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ls: path too long\n&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">strcpy</span>(buf, path);<br>    p = buf+<span class="hljs-built_in">strlen</span>(buf);<br>    *p++ = <span class="hljs-string">&#x27;/&#x27;</span>;<br>    <span class="hljs-keyword">while</span>(read(fd, &amp;de, <span class="hljs-keyword">sizeof</span>(de)) == <span class="hljs-keyword">sizeof</span>(de))&#123;<br>      <span class="hljs-keyword">if</span>(de.inum == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">continue</span>;<br>      memmove(p, de.name, DIRSIZ);<br>      p[DIRSIZ] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span>(stat(buf, &amp;st) &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ls: cannot stat %s\n&quot;</span>, buf);<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %d %d\n&quot;</span>, fmtname(buf), st.type, st.ino, st.size);<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br>  &#125;<br>  close(fd);<br>&#125;<br><br><span class="hljs-type">int</span><br><span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>  <span class="hljs-type">int</span> i;<br><br>  <span class="hljs-keyword">if</span>(argc &lt; <span class="hljs-number">2</span>)&#123;<br>    ls(<span class="hljs-string">&quot;.&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;argc; i++)<br>    ls(argv[i]);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们逐帧分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>* <span class="hljs-title function_">fmtname</span><span class="hljs-params">(<span class="hljs-type">char</span> *path)</span><br>&#123;<br>  <span class="hljs-type">static</span> <span class="hljs-type">char</span> buf[DIRSIZ+<span class="hljs-number">1</span>];<br>  <span class="hljs-type">char</span> *p;<br><br>  <span class="hljs-comment">// Find first character after last slash.</span><br>  <span class="hljs-keyword">for</span>(p=path+<span class="hljs-built_in">strlen</span>(path); p &gt;= path &amp;&amp; *p != <span class="hljs-string">&#x27;/&#x27;</span>; p--)<br>    ;<br>  p++;<br><br>  <span class="hljs-comment">// Return blank-padded name.</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(p) &gt;= DIRSIZ)<br>    <span class="hljs-keyword">return</span> p;<br>  memmove(buf, p, <span class="hljs-built_in">strlen</span>(p));<br>  <span class="hljs-built_in">memset</span>(buf+<span class="hljs-built_in">strlen</span>(p), <span class="hljs-string">&#x27; &#x27;</span>, DIRSIZ-<span class="hljs-built_in">strlen</span>(p));<br>  <span class="hljs-keyword">return</span> buf;<br>&#125;<br></code></pre></td></tr></table></figure><p>这部分用来干什么呢？答案是格式化文件名。这个函数用于找到路径中最后一个斜杠的部分，也就是“最里面”。最后返回使用空格填充的文件名。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">ls</span><span class="hljs-params">(<span class="hljs-type">char</span> *path)</span><br>&#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">512</span>], *p;<br>  <span class="hljs-type">int</span> fd;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> <span class="hljs-title">de</span>;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br><br>  <span class="hljs-keyword">if</span>((fd = open(path, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;ls: cannot open %s\n&quot;</span>, path);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span>(fstat(fd, &amp;st) &lt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;ls: cannot stat %s\n&quot;</span>, path);<br>    close(fd);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">switch</span>(st.type)&#123;<br>  <span class="hljs-comment">//如果是文件</span><br>  <span class="hljs-keyword">case</span> T_FILE:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %d %l\n&quot;</span>, fmtname(path), st.type, st.ino, st.size);<br>    <span class="hljs-keyword">break</span>;<br><br>  <span class="hljs-comment">//如果是目录</span><br>  <span class="hljs-keyword">case</span> T_DIR:<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(path) + <span class="hljs-number">1</span> + DIRSIZ + <span class="hljs-number">1</span> &gt; <span class="hljs-keyword">sizeof</span> buf)&#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ls: path too long\n&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">strcpy</span>(buf, path);<br>    p = buf+<span class="hljs-built_in">strlen</span>(buf);<br>    *p++ = <span class="hljs-string">&#x27;/&#x27;</span>;<br>    <span class="hljs-keyword">while</span>(read(fd, &amp;de, <span class="hljs-keyword">sizeof</span>(de)) == <span class="hljs-keyword">sizeof</span>(de))&#123;<br>      <span class="hljs-keyword">if</span>(de.inum == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">continue</span>;<br>      memmove(p, de.name, DIRSIZ);<br>      p[DIRSIZ] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span>(stat(buf, &amp;st) &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ls: cannot stat %s\n&quot;</span>, buf);<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %d %d %d\n&quot;</span>, fmtname(buf), st.type, st.ino, st.size);<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br>  &#125;<br>  close(fd);<br>&#125;<br></code></pre></td></tr></table></figure><p>这部分又是干什么呢？答案就是ls，列出目录内容。</p><p>它分为两种情况：1.如果是文件，就直接打印文件信息；2.如果是目录，就遍历目录中每个文件和子目录，并打印其信息。</p><p>我们试着使用一下这个<code>ls.c</code>：</p><p>假设你的目录结构如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">/home/joolin/xv6-labs-<span class="hljs-number">2020</span>/user/<br><br>├── ls<span class="hljs-selector-class">.c</span><br><br>├── file1<span class="hljs-selector-class">.txt</span><br><br>├── file2<span class="hljs-selector-class">.txt</span><br><br>└── subdir<br><br>  ├── file3<span class="hljs-selector-class">.txt</span><br><br>  └── file4.txt`<br></code></pre></td></tr></table></figure><p>首先，你需要在 xv6 中编译 <code>ls.c</code> 文件：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">gcc -o <span class="hljs-keyword">ls</span> <span class="hljs-keyword">ls</span>.c<br></code></pre></td></tr></table></figure><ol><li><p><strong>列出当前目录的内容</strong>：</p><p>如果你在 [user](vscode-file:&#x2F;&#x2F;vscode-app&#x2F;d:&#x2F;Microsoft VS Code&#x2F;resources&#x2F;app&#x2F;out&#x2F;vs&#x2F;code&#x2F;electron-sandbox&#x2F;workbench&#x2F;workbench.html) 目录下运行 <code>ls</code> 命令而不带任何参数，它将列出当前目录的内容：</p><p><code>./ls</code></p><p>输出可能如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">file1</span>.txt <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">100</span><br><br><span class="hljs-attribute">file2</span>.txt <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">200</span><br><br><span class="hljs-attribute">subdir</span>  <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">4096</span><br></code></pre></td></tr></table></figure><p>我们只举这么一个例子，目的只是为了知道它究竟有什么用。</p><p>解释输出：</p></li></ol><ul><li><code>file1.txt</code>、<code>file2.txt</code> 是文件名。</li><li><code>1</code> 是文件类型（<code>1</code> 表示普通文件，<code>2</code> 表示目录）。</li><li><code>2</code>、<code>3</code>、<code>4</code>、<code>5</code>、<code>6</code> 是 inode 号。</li><li><code>100</code>、<code>200</code>、<code>300</code>、<code>400</code>、<code>4096</code> 是文件大小（以字节为单位）。</li></ul><p>通过例子，你可以看到 <code>ls.c</code> 程序如何列出目录中的文件和子目录，并显示它们的详细信息。</p><p>好！现在我们知道了ls.c的作用，那么再去模仿其改写find.c岂不是得心应手？</p><p>我们需要根据find.c的需求来进行程序的编写。</p><p>它要我们做什么？</p><p><code>ls.c</code> 用于列出目录内容，而 <code>find.c</code> 用于查找符合条件的文件。</p><p>可以理解为ls.c是遍历列出，而find.c是指定内容。</p><p>我们都知道文件系统是一层一层的，那么自然而然联想到递归。</p><p>所以我们的函数实现也会使用到递归。</p><p>而模仿ls.c中的代码，我们知道首先要判断是否能获取到目录和文件属性，然后要针对不同类型的文件进行不同的处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//错误情况</span><br><span class="hljs-keyword">if</span> ((fd = open(path, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;find: cannot open %s\n&quot;</span>, path);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (fstat(fd, &amp;st) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;find: cannot stat %s\n&quot;</span>, path);<br>    close(fd);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//不同类型不同处理</span><br><span class="hljs-keyword">switch</span> (st.type)<br>&#123;<br><span class="hljs-keyword">case</span> T_FILE:<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;path error\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">case</span> T_DIR:<br>    ...<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>针对文件就直接返回错误</p><p>针对目录就继续处理。</p><p>首先处理目录项。注意目录与目录项是不一样的，这里着重讲一下：</p><p>目录（Directory）</p><ul><li><strong>定义</strong>：目录是文件系统中的一种特殊文件，用于包含其他文件和子目录。目录本身是一个文件，但它的内容是一个文件列表。</li><li>也就是说它是一个列表。</li></ul><p>目录项（Directory Entry）</p><ul><li><strong>定义</strong>：目录项是目录中的一个条目，表示目录中的一个文件或子目录。每个目录项包含文件或子目录的名称和 inode 号。</li><li>也就是说它可以是一个实际的文件。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//处理目录</span><br><span class="hljs-built_in">strcpy</span>(buf, path);<br>p = buf + <span class="hljs-built_in">strlen</span>(buf);<br>*p++ = <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-keyword">while</span> (read(fd, &amp;de, <span class="hljs-keyword">sizeof</span>(de)) == <span class="hljs-keyword">sizeof</span>(de))<br>&#123;<br>    <span class="hljs-keyword">if</span> (de.inum == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(de.name, <span class="hljs-string">&quot;.&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(de.name, <span class="hljs-string">&quot;..&quot;</span>))<br>        <span class="hljs-keyword">continue</span>;<br>    memmove(p, de.name, DIRSIZ);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//处理目录项</span><br><span class="hljs-keyword">if</span> ((fd1 = open(buf, <span class="hljs-number">0</span>)) &gt;= <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span> (fstat(fd1, &amp;st) &gt;= <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">switch</span> (st.type)<br>        &#123;<br>        <span class="hljs-keyword">case</span> T_FILE:<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(de.name, name))<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buf);<br>            &#125;<br>            close(fd1);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> T_DIR:<br>            close(fd1);<br>            find(buf, name);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> T_DEVICE:<br>            close(fd1);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打开目录项并获取其文件属性。如果是文件且文件名匹配，打印文件路径；如果是目录，递归调用 <code>find</code> 函数继续搜索；如果是设备文件，直接关闭文件描述符。</p><h2 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/fs.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">char</span> *path, <span class="hljs-type">char</span> *name)</span><br>&#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">128</span>], *p; <span class="hljs-comment">// 缓冲区</span><br>    <span class="hljs-type">int</span> fd, fd1;       <span class="hljs-comment">// 文件描述符、</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dirent</span> <span class="hljs-title">de</span>;</span>  <span class="hljs-comment">// 目录项</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span>    <span class="hljs-comment">// 文件属性</span><br><br>    <span class="hljs-comment">// 如果文件描述符&lt;0，则说明文件打开失败</span><br>    <span class="hljs-keyword">if</span> ((fd = open(path, <span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span>)<span class="hljs-comment">//这里的参数0表示以只读方式打开文件</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;find: cannot open %s\n&quot;</span>, path);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果文件属性获取失败，则文件打开失败</span><br>    <span class="hljs-keyword">if</span> (fstat(fd, &amp;st) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;find: cannot stat %s\n&quot;</span>, path);<br>        close(fd);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">switch</span> (st.type)<br>    &#123;<br>    <span class="hljs-keyword">case</span> T_FILE:<br>        <span class="hljs-comment">// 文件</span><br>        <span class="hljs-comment">/* code */</span><br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;path error\n&quot;</span>); <span class="hljs-comment">// 路径错误</span><br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">case</span> T_DIR:<br>        <span class="hljs-comment">// 目录</span><br>        <span class="hljs-built_in">strcpy</span>(buf, path);     <span class="hljs-comment">// 复制路径</span><br>        p = buf + <span class="hljs-built_in">strlen</span>(buf); <span class="hljs-comment">// 指针指向路径末尾</span><br>        *p++ = <span class="hljs-string">&#x27;/&#x27;</span>;            <span class="hljs-comment">// 路径末尾加上&#x27;/&#x27;,表示这是个目录</span><br>        <span class="hljs-keyword">while</span> (read(fd, &amp;de, <span class="hljs-keyword">sizeof</span>(de)) == <span class="hljs-keyword">sizeof</span>(de))<span class="hljs-comment">//循环读取目录项</span><br>        &#123;<br>            &#123; <span class="hljs-comment">// 遍历搜索目录</span><br>                <span class="hljs-keyword">if</span> (de.inum == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 如果inum为0，则说明该目录为空</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(de.name, <span class="hljs-string">&quot;.&quot;</span>) || !<span class="hljs-built_in">strcmp</span>(de.name, <span class="hljs-string">&quot;..&quot;</span>)) <span class="hljs-comment">// 如果目录名为.或者..，则跳过</span><br><br>            &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            memmove(p, de.name, DIRSIZ); <span class="hljs-comment">// 将目录名复制到p指向的位置</span><br>            <span class="hljs-keyword">if</span> ((fd1 = open(buf, <span class="hljs-number">0</span>)) &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (fstat(fd1, &amp;st) &gt;= <span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">switch</span> (st.type)<br>                    &#123;<br>                    <span class="hljs-keyword">case</span> T_FILE:                    <span class="hljs-comment">// 如果是文件，进行文件路径打印</span><br>                        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(de.name, name)) <span class="hljs-comment">// 如果找到了文件，即目标文件名和文件名一致</span><br>                        &#123;<br>                            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buf); <span class="hljs-comment">// 打印文件路径</span><br>                        &#125;<br>                        close(fd1);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> T_DIR:     <span class="hljs-comment">// 如果是目录，就递归调用find函数，直到找到最终的目标文件名</span><br>                        close(fd1); <span class="hljs-comment">// 关闭文件描述符</span><br>                        find(buf, name);<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> T_DEVICE:<span class="hljs-comment">//如果是设备文件，直接关闭文件描述符</span><br>                        close(fd1);<br>                        <span class="hljs-keyword">break</span>;           <br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    close(fd);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Usage: find path name\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    find(argv[<span class="hljs-number">1</span>], argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实验5-xargs（难度：Moderate）"><a href="#实验5-xargs（难度：Moderate）" class="headerlink" title="实验5 xargs（难度：Moderate）"></a>实验5 xargs（难度：Moderate）</h1><h2 id="实验要求-4"><a href="#实验要求-4" class="headerlink" title="实验要求"></a>实验要求</h2><blockquote><p>编写一个简化版UNIX的<code>xargs</code>程序：<strong>它从标准输入中按行读取，并且为每一行执行一个命令，将行作为参数提供给命令。</strong>你的解决方案应该在*<strong>user&#x2F;xargs.c*</strong></p></blockquote><h2 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h2><ul><li>使用<code>fork</code>和<code>exec</code>对每行输入调用命令，在父进程中使用<code>wait</code>等待子进程完成命令。</li><li>要读取单个输入行，请一次读取一个字符，直到出现换行符（’\n’）。</li><li>***kernel&#x2F;param.h***声明<code>MAXARG</code>，如果需要声明<code>argv</code>数组，这可能很有用。</li><li>将程序添加到***Makefile***中的<code>UPROGS</code>。</li><li>对文件系统的更改会在qemu的运行过程中保持不变；要获得一个干净的文件系统，请运行<code>make clean</code>，然后<code>make qemu</code></li></ul><h2 id="实验思路-4"><a href="#实验思路-4" class="headerlink" title="实验思路"></a>实验思路</h2><p>实验要求我们编写一个程序，读取行内容，并且按照行来执行命令，执行完后将行作为参数提供给命令。</p><p>提示中说我们可以看看<code>fork</code>和<code>exec</code>，前者我们已经了解，我们直接去看看后者。</p><p><img src="https://joolin-1327264753.cos.ap-guangzhou.myqcloud.com/pictures/image-20250308011848902.png" alt="image-20250308011848902"></p><p>这里传了两个参数，一个是表示要<strong>执行的可执行文件的路径</strong>，一个是表示<strong>命令行参数数组</strong>。</p><p>我们从名字上来分析：exec——execute，也就是执行的意思，那么再结合其给定的参数不难猜——它的作用是<strong>用来通过给定参数读取并执行文件</strong>。</p><p>好，接下来我们根据实验要求逐步实现。</p><p>首先它要我们读取行内容，那么我们就使用<code>read</code>就完事了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> stdIn[<span class="hljs-number">512</span>];<br><span class="hljs-type">int</span> size = read(<span class="hljs-number">0</span>, stdIn, <span class="hljs-keyword">sizeof</span> stdIn);<br></code></pre></td></tr></table></figure><p>其次它要我们按照行来执行指令，那么我们首先需要知道的是行的数量，在C语言中，换行通常使用”\n”来表示，我们将其作为指标进行计算即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> line = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;size;k++)&#123;<br><span class="hljs-keyword">if</span>(stdIn[k]==<span class="hljs-string">&quot;\n&quot;</span>)&#123;<br>line++;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们直接将数据按照行的形式进行存储，这里的话我们可以用到一个二维数组来进行存储。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> output[line][<span class="hljs-number">64</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; size; ++k) &#123;<br>    output[i][j++] = stdIn[k];<br>    <span class="hljs-keyword">if</span> (stdIn[k] == <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>        output[i][j - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        ++i;<br>        j = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，我们就要进行执行的过程了。我们根据提示，得知命令行参数数组的大小不能超过MAXARG；将每一行数据作为参数拼接到命令参数后，并通过 <code>fork</code> 创建子进程执行命令。<code>exec(argv[1], arguments)</code> 用于执行指定的命令，并将参数传递给它。父进程等待子进程结束。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> *arguments[MAXARG];<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; argc - <span class="hljs-number">1</span>; ++j) &#123;<br>    arguments[j] = argv[<span class="hljs-number">1</span> + j];<br>&#125;<br>i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; line) &#123;<br>    arguments[j] = output[i++];<br>    <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>) &#123;<br>        exec(argv[<span class="hljs-number">1</span>], arguments);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    wait(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要代码都已完成。需要注意的是，这个程序可以用来批量处理数据，但是不能MAXARG大小，否则xv6会资源报错。</p><h2 id="完整代码-4"><a href="#完整代码-4" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// user/xargs.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/types.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/stat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;user/user.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;kernel/param.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br>    <span class="hljs-comment">//从标准输入读取数据</span><br>    <span class="hljs-type">char</span> stdIn[<span class="hljs-number">512</span>];<br>    <span class="hljs-type">int</span> size = read(<span class="hljs-number">0</span>, stdIn, <span class="hljs-keyword">sizeof</span> stdIn);<br>    <span class="hljs-comment">//将数据分行存储</span><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> line = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; size; ++k) &#123;<br>        <span class="hljs-keyword">if</span> (stdIn[k] == <span class="hljs-string">&#x27;\n&#x27;</span>) &#123; <span class="hljs-comment">// 根据换行符的个数统计数据的行数</span><br>            ++line;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">char</span> output[line][<span class="hljs-number">64</span>]; <span class="hljs-comment">// 根据提示中的MAXARG，命令参数长度最长为32个字节</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; size; ++k) &#123;<br>        output[i][j++] = stdIn[k];<br>        <span class="hljs-keyword">if</span> (stdIn[k] == <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>            output[i][j - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用0覆盖掉换行符。C语言没有字符串类型，char类型的数组中，&#x27;0&#x27;表示字符串的结束</span><br>            ++i; <span class="hljs-comment">// 继续保存下一行数据</span><br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//将数据分行拼接到argv[2]后，并运行</span><br>    <span class="hljs-type">char</span> *arguments[MAXARG];<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; argc - <span class="hljs-number">1</span>; ++j) &#123;<br>        arguments[j] = argv[<span class="hljs-number">1</span> + j]; <span class="hljs-comment">// 从argv[1]开始，保存原本的命令+命令参数</span><br>    &#125;<br>    i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; line) &#123;<br>        arguments[j] = output[i++]; <span class="hljs-comment">// 将每一行数据都分别拼接在原命令参数后</span><br>        <span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>) &#123;<br>            exec(argv[<span class="hljs-number">1</span>], arguments);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        wait(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ABOUT ME</title>
    <link href="/2024/12/19/ABOUT-ME/"/>
    <url>/2024/12/19/ABOUT-ME/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Java】Chapter 0——进入Java的世界</title>
    <link href="/2024/12/18/Chapter%200.%E8%BF%9B%E5%85%A5Java%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    <url>/2024/12/18/Chapter%200.%E8%BF%9B%E5%85%A5Java%E7%9A%84%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<p>【Java】Chapter 0——进入Java的世界</p><h2 id="Chapter-0：进入Java的世界"><a href="#Chapter-0：进入Java的世界" class="headerlink" title="Chapter 0：进入Java的世界"></a><em>Chapter 0</em>：进入Java的世界</h2><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>初知Java，认为是与C++异曲同工之妙的一款面向对象语言，仅此而已。后来听说其在世界范围内的名声，能与C、C++等众多语言齐头并进，作为世界上最常用的语言之一，想必肯定是有其独特之处，以及受众多程序员青睐的点。</p><p><img src="https://joolin-1327264753.cos.ap-guangzhou.myqcloud.com/pictures/image-20240921203952787.png" alt="image-20240921203952787"></p><p>在阅读了一些书籍以及面临学校的Java课程开设之后，对其的看法大有改观。它依旧还是一款面向对象的语言，但是又不那么常规；它有着千万种变化以及用不尽的库，等待人细细品味；我一直认为编程语言是一种艺术，那么Java也会是其中的一大艺术流派之集成。</p><p>编程语言的目标是让你写出一个程序并且让其能够在编译器下运行，并且输出到终端——<strong>Java</strong>对于这一过程的适配堪称非常优秀。</p><p>我们去探寻Java的历史，你会发现它的更新是呈指数型增长的；由于它实际上是借鉴过C++的前人之壮举，所以后期发展不说如履平地，但是起码起了一个好头——这才导致它发展愈来愈快愈来愈好。<img src="https://joolin-1327264753.cos.ap-guangzhou.myqcloud.com/pictures/image-20240926194520543.png" alt="image-20240926194520543"></p><ul><li>Java发展史（关于历史，可看可不看，它仅仅是作为你拓展Java知识面的一个来源）：<ol><li><strong>梦开始的地方</strong>：Java最开始只是<a href="https://zh.wikipedia.org/wiki/Sun%E9%9B%BB%E8%85%A6">Sun微系统</a>（Sun MicroSystems）公司在1990年12月开始研究的一个内部项目。Sun微系统公司的一个叫做<a href="https://zh.wikipedia.org/w/index.php?title=%E5%B8%95%E7%89%B9%E9%87%8C%E5%85%8B%C2%B7%E8%AB%BE%E9%A0%93&action=edit&redlink=1">帕特里克·诺顿</a>的工程师被公司自己开发的<a href="https://zh.wikipedia.org/wiki/C%2B%2B">C++</a>和<a href="https://zh.wikipedia.org/wiki/C%E8%AA%9E%E8%A8%80">C语言</a>编译器搞得焦头烂额，因为其中的<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3">API</a>极其难用。帕特里克决定改用<a href="https://zh.wikipedia.org/wiki/NeXT">NeXT</a>，同时他也获得了研究公司的一个叫做<strong>“Stealth计划”</strong>的项目的机会。</li><li>C++的缺陷引发的思考：项目成员发现C++太复杂以至很多开发者经常错误使用。他们发现C++缺少<a href="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</a>系统，还有可移植的安全性、<a href="https://zh.wikipedia.org/w/index.php?title=%E5%88%86%E4%BD%88%E7%A8%8B%E5%BA%8F%E8%A8%AD%E8%A8%88&action=edit&redlink=1">分布程序设计</a>、和<a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%9F%B7%E8%A1%8C%E7%B7%92">多线程</a>功能。最后，他们想要一种易于移植到各种设备上的平台。</li><li>Java的初命名：最初，高斯林试图修改和扩展C++的功能，他自己称这种新语言为C++ – [<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90">来源请求]</a>，但是后来他放弃了。他将要创造出一种全新的语言，被他命名为“<strong>Oak</strong>”（橡树），以他的办公室外的橡树命名。</li><li>Java名字的诞生：由于<a href="https://zh.wikipedia.org/wiki/%E5%95%86%E6%A0%87">商标</a>搜索显示Oak已被一家显卡制造商注册。于是同年，Oak被改名为<strong>Java</strong>。当使用十六进制编辑器打开由Java源代码编译出的二进制文件（.class文件）的话，最前面的32位将显示为CA FE BA BE，即词组“CAFE BABE”（咖啡屋宝贝）。</li><li>至于 “Java” 这个名称到底出自谁的灵感 —— 由于留给 OAK 改名的时间非常紧迫，而且 OAK 即将发布新版本，在这样仓促的状态中，没人记得 Java 这个名称是谁提出来的。当时众说纷纭，有说是因为现场有人在喝名为Java的咖啡，也有人说是一名成员想起自己的爪哇岛上喝过Java咖啡，但是并没有很确切的答案。不过，作为一名咖啡爱好者来说，我很喜欢Java这个名字，同时也一直想找个机会品尝一下这名为Java的咖啡到底味道如何，或许我喝拿铁（Latte），也可以创造出一种叫做Latte的编程语言（bushi<br><img src="https://joolin-1327264753.cos.ap-guangzhou.myqcloud.com/pictures/image-20240926200239214.png" alt="image-20240926200239214"></li></ol></li></ul><p>自1995月23日Java诞生以来，已有将近30年时间。在这期间，Java从第一个JDK——JDK1.0进化到了如今的Java SE 21，历经数十个版本的更新，Java正在不断改进技术以及对计算机技术的各种匹配和延申。Java是许多软件开发人员用于编写涉及科学计算和数学运算的应用程序的选择之一。这些程序通常被认为是快速和安全的，具有更高的便携性和低维护性。</p><p>在这个编程语言横向发展的阶段，像C++、Java这类语言依旧处于独占鳌头的地位——这也说明了它们的重要性，毕竟现代高级语言也或多或少有借鉴以前的高级语言。没有一种编程语言是完美的，或者是不完美也是它们的一部分。就像C++受人诟病的不具备垃圾回收系统，Java有时也会由于其语言特性将简单问题复杂化。这都是独属于它们的属性，而众多优秀的项目、优雅的程序也是基于这些从而写出的。</p><p>在接下来的时光，我会详细介绍Java的各类知识，探索其语言乐趣。如何写出第一个“Hello World”？以及如何使用Java写出专属自己的网站项目——笔者也在学习之中，希望各位能同我一起在Java学习感受编程的美好~<br>（ps：如有疏漏或者错误的点，敬请指出，期待斧正！）</p><p>在进入Java世界之前，我们有四看，来探讨其编程思想以及对于深入了解有一个好的开头，分为以下四个“LOOK”：</p><h2 id="一瞥：Java中重要的面向对象思想"><a href="#一瞥：Java中重要的面向对象思想" class="headerlink" title="一瞥：Java中重要的面向对象思想"></a>一瞥：Java中重要的面向对象思想</h2><p><strong>面向对象程序设计</strong>（英语：Object-oriented programming，<a href="https://zh.wikipedia.org/wiki/%E7%BC%A9%E5%86%99">缩写</a>：OOP）是种具有<a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">对象</a>概念的<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B">编程典范</a>，同时也是一种程序开发的抽象方针。“面向对象程序设计语言”的核心之一就是开发者在设计软件的时候可以使用自定义的类型和关联操作。<strong>代码和数据的实际集合体叫做“对象”</strong>。一个对象可以想象成绑定了很多“行为（代码）”和“状态（数据）”的物体。</p><p>或许你听说过类（Class）这个概念，在面向对象程序设计中，类是创建对象的蓝图，也是整个OOP最基本的结构之一；对象指的是类的实例，</p><h2 id="二察：Java中的核心概念以及重要组成部分"><a href="#二察：Java中的核心概念以及重要组成部分" class="headerlink" title="二察：Java中的核心概念以及重要组成部分"></a>二察：Java中的核心概念以及重要组成部分</h2><p>什么是方法、类、实例变量、源文件、为什么看起来和其他的语言有不同但又类似的结构？</p><h2 id="三对：Java中“似曾相识”的事物"><a href="#三对：Java中“似曾相识”的事物" class="headerlink" title="三对：Java中“似曾相识”的事物"></a>三对：Java中“似曾相识”的事物</h2><p>Java 和 C&#x2F;C++同为编程语言，Java和C++更是像师兄弟，共享着许多似曾相识的语法。然而虽然共享了很多相似之处，但它们之间也有显著的不同，否则为什么不直接叫Java为C–呢？（当初设计时确实有这个想法，但咱就是要创造一个新的编程语言！所以当然会有不同之处！）这是异同点，有些是弥补了C&#x2F;C++的不足，有些又是它的特性，或好或坏，总归是属于Java的，也是独一无二的。</p><h3 id="Familiar："><a href="#Familiar：" class="headerlink" title="Familiar："></a>Familiar：</h3><ol><li><p><strong>基本语法相似</strong>：</p><ul><li>Java 和 C&#x2F;C++ 的基本语法非常相似，例如变量声明、循环（如 <code>for</code>, <code>while</code>）, 条件语句（如 <code>if</code>, <code>switch</code>）等。很多初学者会发现学习 Java 的语法相对容易，尤其如果有 C 或 C++ 的背景；相反过来，如果学习过Java之后再去学习这两个语言也会有比较好的学习感受。</li><li>相同的控制结构：<code>if-else</code>, <code>for</code>, <code>while</code>, <code>do-while</code> 等控制流在这三者中几乎一致。</li></ul></li><li><p><strong>面向对象编程</strong>：</p><ul><li>C++ 和 Java 都是面向对象编程（OOP）语言，支持类、对象、继承、多态等概念。<strong>尽管 C++ 支持多重继承而 Java 不支持</strong>，但二者都提供了强大的面向对象特性。</li></ul></li><li><p><strong>数据类型</strong>：</p><ul><li>Java 和 C&#x2F;C++ 都有相似的基本数据类型，如 <code>int</code>, <code>float</code>, <code>double</code>, <code>char</code> 等。</li></ul></li><li><p><strong>函数&#x2F;方法调用方式</strong>：</p><ul><li>三者都使用相似的函数调用机制，参数通过值传递，但 Java 不支持像 C++ 中的引用传递。</li></ul></li></ol><h3 id="Different："><a href="#Different：" class="headerlink" title="Different："></a>Different：</h3><ol><li><p><strong>平台独立性</strong>：</p><ul><li>Java 最大的区别在于它的<strong>平台独立性</strong>。Java 程序通过编译生成字节码，然后由 <strong>JVM（Java 虚拟机）</strong>执行，因此它可以在不同操作系统上运行，这个特点使得它可以在各个平台如鱼得水，无需有过多的编译器桎梏。C 和 C++ 是<strong>编译型语言</strong>，生成的可执行文件依赖于具体的操作系统和硬件。</li></ul></li><li><p><strong>内存管理</strong>：</p><ul><li>Java 使用<strong>自动内存管理</strong>（垃圾回收，Garbage Collection），开发者无需手动管理内存。而在 C 和 C++ 中，开发者需要手动管理内存的分配和释放（通过 <code>malloc/free</code> 在 C 中，或 <code>new/delete</code> 在 C++ 中）——这也是Java创立者当初就想要解决的C++诟病之一。这意味着在 Java 中，常见的内存泄漏和野指针问题较少见。</li></ul></li><li><p><strong>指针</strong>：</p><ul><li>Java 中没有显式的<strong>指针</strong>概念，而 C 和 C++ 使用指针来直接操作内存。在 Java 中，所有对象都是通过引用传递的，引用本质上类似于指针，<strong>但开发者不能直接操纵它们的地址</strong>，这有时可以省很多事，但有时又可能是个缺点。</li></ul></li><li><p><strong>多继承</strong>：</p><ul><li>C++ 支持<strong>多继承</strong>（一个类可以继承多个基类），但这可能会导致复杂的问题（如菱形继承问题）。Java 通过<strong>接口</strong>（interface）来提供类似多继承的功能，避免了多继承的复杂性。</li></ul></li><li><p><strong>结构和联合</strong>：</p><ul><li>C 和 C++ 中有 <code>struct</code>（结构体）和 <code>union</code>（共用体），这些用于定义自定义的数据结构。而<strong>在 Java 中没有这类结构，所有数据类型都必须属于某个类。</strong>如果你想要将这两者理解为类似的概念，也不是不行。</li></ul></li><li><p><strong>模板 vs 泛型</strong>：</p><ul><li>C++ 支持<strong>模板</strong>（templates），允许创建通用的函数和类。Java 引入了<strong>泛型</strong>（Generics），实现类似的功能，但其实现方式不同。Java 的泛型是通过<strong>类型擦除</strong>实现的，即在运行时，泛型信息被移除，而 C++ 的模板是在编译时展开的。</li></ul></li><li><p><strong>指令和操作</strong>：</p><ul><li>Java 是一种完全的<strong>面向对象语言</strong>，所有的代码都必须写在类中，而 C++ 允许你写不属于任何类的全局函数和变量。C 中则没有面向对象的概念。</li></ul></li><li><p><strong>异常处理</strong>：</p><ul><li>Java 有非常完善的<strong>异常处理机制</strong>，每个异常都是 <code>Throwable</code> 类的一个对象。C++ 也支持异常处理，但不像 Java 那样强制使用，C 则完全没有异常处理机制。</li></ul></li><li><p><strong>编译与执行</strong>：</p><ul><li>C 和 C++ 代码通过编译器编译为机器码（与平台紧密相关），执行时无需依赖运行时环境。</li><li>Java 则通过编译器先将代码编译为字节码，然后在 JVM 上运行，字节码与平台无关，依赖 JVM 的存在来解释执行。</li><li>注：这一点同第一点来一起理解，可以看出JVM的使用有时也会导致产生一些问题。</li></ul></li><li><p><strong>性能</strong>：</p><ul><li>C 和 C++ 由于直接编译为机器码，通常执行速度更快，而 Java 因为是通过 JVM 解释字节码执行，相对来说速度稍慢。但 Java 的现代 JVM 优化技术（如 JIT 编译）已经大大提高了其执行性能（但还是终究比不过硬件加速的C++）。</li></ul></li></ol><h3 id="Anyway："><a href="#Anyway：" class="headerlink" title="Anyway："></a>Anyway：</h3><p>抛开它们在实际应用上的异同点来看，Java 更注重安全性、稳定性和跨平台特性，而 C&#x2F;C++ 则更强调效率和灵活性，尤其在系统编程和底层开发中；所以说各有所长各有所需，编程语言始终只是代码编写者的工具，我们根据特定需求选择合适语言即可。</p><h2 id="四望：Java专栏的规划"><a href="#四望：Java专栏的规划" class="headerlink" title="四望：Java专栏的规划"></a>四望：Java专栏的规划</h2><p>毫无疑问，专栏的第一篇将会是“如何使用Java写出第一个”Hello World”？”在编程语言学习中，打印可谓是必不可少的初学操作，同时在了解如何打印的同时，你也会对语言的大致语法结构和组成部分有一定的了解。</p><p>而后由于笔者学校开展了Java课程，大概率会按照课程的基本设计顺序来进行更新——这只是指顺序，毕竟由浅入深，教材基本是不会出错的；而对于重点、要点、注意以及其他一部分，我会进行规划并在后续的专栏中体现出来。</p><p>同时，我会根据Java知识中的多个小知识点进行分类汇总以及分类讲解，从而达到最好的理解效果。</p><p>我认为，这个专栏不只是自己笔记的总结和理解，更是对想要了解Java的人的一个初学的宝典——因为我也是初学者。</p><p>本专栏参考资料过多，所涉及的资料和代码都会上传至：<a href="https://github.com/Skrrapper/Javaroastery">Javaroastery</a>，读者们有兴趣的可以去查看，觉得有用的还希望可以<strong>star</strong>一下，感谢各位好homie们的支持！</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/12/14/hello-world/"/>
    <url>/2024/12/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
